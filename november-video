#!/bin/bash

nov_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$nov_dir/november-init"

if ishelp $1; then
    echo "November-video screen recorder (frontend for ffmpeg)"
    echo
    echo "Usage: $(basename $0) [option]"
    echo
    echo "Options:"
    echo "  record"
    echo "  record-selection"
    echo "  stop"
    echo "  toggle"
    echo "  toggle-selection"
    echo
    echo "You need to configure November before usage, see https://github.com/nibogd/november"
    exit
fi

depend "ffmpeg"
depend "slop"

checkconf
source "$configfile"

if command -v "xdpyinfo" >/dev/null; then
   resolution="`xdpyinfo | grep dimensions | awk '{print $2}'`"
elif command -v "xrandr" >/dev/null; then
    resolution="`xrandr | grep \* | head | awk '{print $1}'`"
fi
if [ -z "$resolution" ]; then
    echo "Can't get screen resolution"
    echo "Please install xdpyinfo or xrandr"
    exit 1
fi

case $1 in
    record)
        if [ ! -f $ffmpeg_pid_path ] || [ "`cat $ffmpeg_pid_path`" == '' ]; then
            timestamp=$screencast_prefix`date +%Y%m%d_%H%M%S`
            file="$screenshots_dir/$timestamp.$video_format"

            nohup ffmpeg -video_size $resolution -framerate 25 -f x11grab -i :0.0+0,0 $file >/dev/null 2>&1 &
            PID="$!"
            echo $PID > $ffmpeg_pid_path
            echo $file > $last_cast_path
        else
            echo "Already recording a video. If not, just delete the $ffmpeg_pid_path file."
            exit 1
        fi
        ;;
    record-selection)
        if [ ! -f $ffmpeg_pid_path ] || [ "`cat $ffmpeg_pid_path`" == '' ]; then
            timestamp=$screencast_prefix`date +%Y%m%d_%H%M%S`
            file="$screenshots_dir/$timestamp.$video_format"

            eval $(slop)
            nohup ffmpeg -video_size "$W"x"$H" -framerate 25 -f x11grab -i :0.0+$X,$Y $file >/dev/null 2>&1 &
            PID="$!"
            echo $PID > $ffmpeg_pid_path
            echo $file > $last_cast_path
        else
            echo "Already recording a video. If not, just delete the $ffmpeg_pid_path file."
            exit 1
        fi
        ;;
    stop)
        if [ ! -f $ffmpeg_pid_path ] || [ "`cat $ffmpeg_pid_path`" == '' ]; then
            echo 'Not recording a video'
            exit 1
        else
            kill "`cat $ffmpeg_pid_path`"
            echo "" > $ffmpeg_pid_path
            notify 'Screencast' "Saved to `cat $last_cast_path`!"
        fi
        ;;
    toggle)
        if [ ! -f $ffmpeg_pid_path ] || [ "`cat $ffmpeg_pid_path`" == '' ]; then
            timestamp=$screencast_prefix`date +%Y%m%d_%H%M%S`
            file="$screenshots_dir/$timestamp.$video_format"

            nohup ffmpeg -video_size $resolution -framerate 25 -f x11grab -i :0.0+0,0 $file >/dev/null 2>&1 &
            PID="$!"
            echo $PID > $ffmpeg_pid_path
            echo $file > $last_cast_path
        else
            kill "`cat $ffmpeg_pid_path`"
            echo "" > $ffmpeg_pid_path
            notify 'Screencast' "Saved to `cat $last_cast_path`!"
        fi
        ;;
    toggle-selection)
        if [ ! -f $ffmpeg_pid_path ] || [ "`cat $ffmpeg_pid_path`" == '' ]; then
            timestamp=$screencast_prefix`date +%Y%m%d_%H%M%S`
            file="$screenshots_dir/$timestamp.$video_format"

            eval $(slop)
            nohup ffmpeg -video_size "$W"x"$H" -framerate 25 -f x11grab -i :0.0+$X,$Y $file >/dev/null 2>&1 &
            PID="$!"
            echo $PID > $ffmpeg_pid_path
            echo $file > $last_cast_path
        else
            kill "`cat $ffmpeg_pid_path`"
            echo "" > $ffmpeg_pid_path
            notify 'Screencast' "Saved to `cat $last_cast_path`!"
        fi
        ;;
    *)
        echo 'Unknown option. Run -h to see help.'
        exit 1
        ;;
esac

